
package hashingdemox;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.Base64;
import java.util.concurrent.TimeUnit;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


//import static javax.swing.JOptionPane.showMessageDialog;
public class HashingDemo extends javax.swing.JFrame {
    
    /**
     * Creates new form ContactEditor
     */
    public String myKey = "";
    public String fileText = null;
   
    public HashingDemo() {
        
        initComponents();
//        jLbCyperText.setText("");
//        jLbCyperText.set;
        jtxtEncTimeBlowfish.setText("0");
        jtxtDecTimeBlowfish.setText("0");
        jtxtHashTimeMD5.setText("0");
        jtxtHashTimeSHA512.setText("0");
        jtxtEncTimeMD5.setText("0");      
        jtxtEncTimeSHA512.setText("0");
        jtxtDecTimeMD5.setText("0");
        jtxtDecTimeSHA512.setText("0");
        jtxtCypherLength.setText("0");     
        encKey.setText("");
        
        jtxtEncTimeBlowfish2.setText("0");
        jtxtDecTimeBlowfish2.setText("0");
        jtxtHashTimeMD52.setText("0");
        jtxtEncTimeMD52.setText("0");
        jtxtDecTimeMD52.setText("0");
        jtxtHashTimeSHA5122.setText("0");
       jtxtEncTimeSHA5122.setText("0");
       jtxtDecTimeSHA5122.setText("0");
        
        fileTextLength.setText("0");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtpMD5CypherText = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jBtClearMD5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jbtEncryptMD5Hash = new javax.swing.JButton();
        jbtDecryptMD5Hash = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jtpMD5CypherText2 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtpMD5PlainText = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jtxtHashTimeMD5 = new javax.swing.JTextField();
        jtxtEncTimeMD5 = new javax.swing.JTextField();
        jtxtDecTimeMD5 = new javax.swing.JTextField();
        jBMD5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnFilePicker = new javax.swing.JButton();
        fileTextLength = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        filePath = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtpSHA512CypherText = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jBtClearSHA512 = new javax.swing.JButton();
        jbtEncryptSHA512Hash = new javax.swing.JButton();
        jbtDecryptSHA512Hash = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jtpSHA512CypherText2 = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jtpSHA512PlainText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jtxtHashTimeSHA512 = new javax.swing.JTextField();
        jtxtEncTimeSHA512 = new javax.swing.JTextField();
        jtxtDecTimeSHA512 = new javax.swing.JTextField();
        jBSha512 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpPlainText = new javax.swing.JTextPane();
        jbtClearPlainText = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtxtCypherLength = new javax.swing.JTextField();
        encKey = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jbtBlowfish1 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jtpBlowfishCypherText1 = new javax.swing.JTextArea();
        jBtClearBlowFish1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jbtnDecryptBlowfish2 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jtpBlowfishPlainText1 = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        jtxtEncTimeBlowfish2 = new javax.swing.JTextField();
        jtxtDecTimeBlowfish2 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jtpMD5Hash = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jBtClearSHA513 = new javax.swing.JButton();
        jBSha513 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jbtnEncryptHash = new javax.swing.JButton();
        jbtnDecryptMD52 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        jtpMD5PlainText3 = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jtxtHashTimeMD52 = new javax.swing.JTextField();
        jtxtEncTimeMD52 = new javax.swing.JTextField();
        jtxtDecTimeMD52 = new javax.swing.JTextField();
        jScrollPane14 = new javax.swing.JScrollPane();
        jtpMD5CypherText3 = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jtpSHA512Hash = new javax.swing.JTextArea();
        jLabel31 = new javax.swing.JLabel();
        jBtClearSHA514 = new javax.swing.JButton();
        jBSha512x = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jbtnEncHash2 = new javax.swing.JButton();
        jbtnDecSHA5123 = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        jtpSHA512PlainText3 = new javax.swing.JTextArea();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jtxtHashTimeSHA5122 = new javax.swing.JTextField();
        jtxtEncTimeSHA5122 = new javax.swing.JTextField();
        jtxtDecTimeSHA5122 = new javax.swing.JTextField();
        jScrollPane18 = new javax.swing.JScrollPane();
        jtpSHA512CypherText3 = new javax.swing.JTextArea();
        jLabel36 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbtBlowfish = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtpBlowfishCypherText = new javax.swing.JTextArea();
        jBtClearBlowFish = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jbtDecryptBlowfish = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtpBlowfishPlainText = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jtxtEncTimeBlowfish = new javax.swing.JTextField();
        jtxtDecTimeBlowfish = new javax.swing.JTextField();

        fileChooser.setDialogTitle("Plaintext File Chooser Dialog");
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HASHER");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MD5", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtpMD5CypherText.setEditable(false);
        jtpMD5CypherText.setColumns(20);
        jtpMD5CypherText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5CypherText.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5CypherText.setLineWrap(true);
        jtpMD5CypherText.setRows(5);
        jScrollPane5.setViewportView(jtpMD5CypherText);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Hash Time (Sec)");

        jBtClearMD5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtClearMD5.setText("Clear MD5");
        jBtClearMD5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearMD5ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Hash Value");

        jbtEncryptMD5Hash.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtEncryptMD5Hash.setText("Encrypt Hash");
        jbtEncryptMD5Hash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEncryptMD5HashActionPerformed(evt);
            }
        });

        jbtDecryptMD5Hash.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtDecryptMD5Hash.setText("Decrypt");
        jbtDecryptMD5Hash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDecryptMD5HashActionPerformed(evt);
            }
        });

        jtpMD5CypherText2.setColumns(20);
        jtpMD5CypherText2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5CypherText2.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5CypherText2.setLineWrap(true);
        jtpMD5CypherText2.setRows(5);
        jScrollPane8.setViewportView(jtpMD5CypherText2);

        jtpMD5PlainText.setColumns(20);
        jtpMD5PlainText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5PlainText.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5PlainText.setLineWrap(true);
        jtpMD5PlainText.setRows(5);
        jScrollPane7.setViewportView(jtpMD5PlainText);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Encrypt Time (Sec)");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Cyphertext");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("Decrypt Time (Sec)");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Plaintext");

        jtxtHashTimeMD5.setEditable(false);
        jtxtHashTimeMD5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtHashTimeMD5.setForeground(new java.awt.Color(0, 102, 51));
        jtxtHashTimeMD5.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtHashTimeMD5.setText("jTextField1");

        jtxtEncTimeMD5.setEditable(false);
        jtxtEncTimeMD5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeMD5.setForeground(new java.awt.Color(0, 102, 51));
        jtxtEncTimeMD5.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeMD5.setText("jTextField1");

        jtxtDecTimeMD5.setEditable(false);
        jtxtDecTimeMD5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeMD5.setForeground(new java.awt.Color(0, 102, 51));
        jtxtDecTimeMD5.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeMD5.setText("jTextField1");

        jBMD5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBMD5.setText("Hash");
        jBMD5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMD5ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jbtEncryptMD5Hash)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(jBMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel12)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtHashTimeMD5)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel15)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtEncTimeMD5))
                .add(12, 12, 12))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jBtClearMD5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel20)
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jScrollPane5)
                .addContainerGap())
            .add(jPanel4Layout.createSequentialGroup()
                .add(jbtDecryptMD5Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel22)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtDecTimeMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jLabel24)
                .add(131, 131, 131))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jLabel12)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxtHashTimeMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .add(6, 6, 6)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxtEncTimeMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtEncryptMD5Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel20)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jbtDecryptMD5Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jtxtDecTimeMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel22)
                        .add(40, 40, 40)))
                .add(5, 5, 5)
                .add(jLabel24)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBtClearMD5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 3, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {jBMD5, jbtEncryptMD5Hash}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel4Layout.linkSize(new java.awt.Component[] {jtxtEncTimeMD5, jtxtHashTimeMD5}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Chooser", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        btnFilePicker.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFilePicker.setText("Pick Plaintext File");
        btnFilePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilePickerActionPerformed(evt);
            }
        });

        fileTextLength.setEditable(false);
        fileTextLength.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        fileTextLength.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fileTextLength.setText("jTextField1");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Char Length");

        filePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        filePath.setText("No selected");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(2, 2, 2)
                .add(btnFilePicker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filePath)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileTextLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnFilePicker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29))
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fileTextLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("File-Based Technique");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SHA-512", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtpSHA512CypherText.setEditable(false);
        jtpSHA512CypherText.setColumns(20);
        jtpSHA512CypherText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512CypherText.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512CypherText.setLineWrap(true);
        jtpSHA512CypherText.setRows(5);
        jScrollPane4.setViewportView(jtpSHA512CypherText);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Hash Time (Sec)");

        jBtClearSHA512.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtClearSHA512.setText("Clear SHA-512");
        jBtClearSHA512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearSHA512ActionPerformed(evt);
            }
        });

        jbtEncryptSHA512Hash.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtEncryptSHA512Hash.setText("Encrypt Hash");
        jbtEncryptSHA512Hash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEncryptSHA512HashActionPerformed(evt);
            }
        });

        jbtDecryptSHA512Hash.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtDecryptSHA512Hash.setText("Decrypt");
        jbtDecryptSHA512Hash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDecryptSHA512HashActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Enrypt Time (Sec)");

        jtpSHA512CypherText2.setColumns(20);
        jtpSHA512CypherText2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512CypherText2.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512CypherText2.setLineWrap(true);
        jtpSHA512CypherText2.setRows(5);
        jScrollPane9.setViewportView(jtpSHA512CypherText2);

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Cyphertext");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setText("Decrypt Time (Sec)");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("Plaintext");

        jtpSHA512PlainText.setColumns(20);
        jtpSHA512PlainText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512PlainText.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512PlainText.setLineWrap(true);
        jtpSHA512PlainText.setRows(5);
        jScrollPane10.setViewportView(jtpSHA512PlainText);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Hash Value");

        jtxtHashTimeSHA512.setEditable(false);
        jtxtHashTimeSHA512.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtHashTimeSHA512.setForeground(new java.awt.Color(0, 0, 153));
        jtxtHashTimeSHA512.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtHashTimeSHA512.setText("jTextField1");

        jtxtEncTimeSHA512.setEditable(false);
        jtxtEncTimeSHA512.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeSHA512.setForeground(new java.awt.Color(0, 0, 153));
        jtxtEncTimeSHA512.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeSHA512.setText("jTextField1");

        jtxtDecTimeSHA512.setEditable(false);
        jtxtDecTimeSHA512.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeSHA512.setForeground(new java.awt.Color(0, 0, 153));
        jtxtDecTimeSHA512.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeSHA512.setText("jTextField1");

        jBSha512.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBSha512.setText("Hash");
        jBSha512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSha512ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(116, 116, 116)
                .add(jLabel2)
                .add(0, 0, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4)
                    .add(jScrollPane10)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                            .add(jBSha512, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(168, 168, 168))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 293, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jBtClearSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel3Layout.createSequentialGroup()
                            .add(jbtDecryptSHA512Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtDecTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jbtEncryptSHA512Hash)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(6, 6, 6)
                                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtHashTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtEncTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel19)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel11)))
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(40, 40, 40)
                                        .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(151, 151, 151)
                                .add(jLabel27)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jLabel11)
                .add(2, 2, 2)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxtHashTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBSha512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel18)
                .add(1, 1, 1)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtxtEncTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jbtEncryptSHA512Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(1, 1, 1)
                .add(jLabel19)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel25)
                .add(4, 4, 4)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtDecryptSHA512Hash, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtxtDecTimeSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(jLabel27)
                .add(1, 1, 1)
                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jBtClearSHA512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0))
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {jBSha512, jbtEncryptSHA512Hash}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plain Text", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtpPlainText.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jtpPlainText.setName("txtRaw"); // NOI18N
        jtpPlainText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtpPlainTextFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtpPlainText);

        jbtClearPlainText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtClearPlainText.setText("Reset");
        jbtClearPlainText.setName("txtReset"); // NOI18N
        jbtClearPlainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearPlainTextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Character Length");

        jtxtCypherLength.setEditable(false);
        jtxtCypherLength.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jtxtCypherLength.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtCypherLength.setText("jTextField1");

        encKey.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        encKey.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        encKey.setText("jTextField1");

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel37.setText("Enter Key");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jbtClearPlainText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 582, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(87, 87, 87))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jtxtCypherLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(encKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 201, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(85, 85, 85)
                                .add(jLabel37)))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(55, 55, 55)
                .add(jbtClearPlainText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtxtCypherLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(encKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, Short.MAX_VALUE))
        );

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel29.setText("Text-Based Technique");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BlowFish", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jbtBlowfish1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtBlowfish1.setText("Encrypt");
        jbtBlowfish1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBlowfish1ActionPerformed(evt);
            }
        });

        jtpBlowfishCypherText1.setEditable(false);
        jtpBlowfishCypherText1.setColumns(20);
        jtpBlowfishCypherText1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishCypherText1.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishCypherText1.setLineWrap(true);
        jtpBlowfishCypherText1.setRows(5);
        jtpBlowfishCypherText1.setWrapStyleWord(true);
        jScrollPane11.setViewportView(jtpBlowfishCypherText1);

        jBtClearBlowFish1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jBtClearBlowFish1.setText("Clear Blowfish");
        jBtClearBlowFish1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearBlowFish1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Cyphertext");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Encryption Time (Sec)");

        jbtnDecryptBlowfish2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnDecryptBlowfish2.setText("Decrypt");
        jbtnDecryptBlowfish2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDecryptBlowfish2ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Decryption Time");

        jtpBlowfishPlainText1.setEditable(false);
        jtpBlowfishPlainText1.setColumns(20);
        jtpBlowfishPlainText1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishPlainText1.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishPlainText1.setLineWrap(true);
        jtpBlowfishPlainText1.setRows(5);
        jtpBlowfishPlainText1.setWrapStyleWord(true);
        jScrollPane12.setViewportView(jtpBlowfishPlainText1);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Plaintext");

        jtxtEncTimeBlowfish2.setEditable(false);
        jtxtEncTimeBlowfish2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeBlowfish2.setForeground(new java.awt.Color(153, 0, 0));
        jtxtEncTimeBlowfish2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeBlowfish2.setText("jTextField1");

        jtxtDecTimeBlowfish2.setEditable(false);
        jtxtDecTimeBlowfish2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeBlowfish2.setForeground(new java.awt.Color(153, 0, 0));
        jtxtDecTimeBlowfish2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeBlowfish2.setText("jTextField1");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText("(Sec)");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jtxtEncTimeBlowfish2)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(jbtBlowfish1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(2, 2, 2)))
                .add(jScrollPane11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jbtnDecryptBlowfish2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(8, 8, 8))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel38)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel14)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtDecTimeBlowfish2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3))
            .add(jPanel6Layout.createSequentialGroup()
                .add(288, 288, 288)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel23)
                .add(205, 205, 205))
            .add(jPanel6Layout.createSequentialGroup()
                .add(394, 394, 394)
                .add(jBtClearBlowFish1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel23))
                .add(10, 10, 10)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jPanel6Layout.createSequentialGroup()
                            .add(jbtnDecryptBlowfish2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(1, 1, 1)
                            .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jLabel38)
                            .add(1, 1, 1)
                            .add(jtxtDecTimeBlowfish2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jbtBlowfish1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(3, 3, 3)
                                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(jLabel9)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jtxtEncTimeBlowfish2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jScrollPane11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .add(8, 8, 8)
                .add(jBtClearBlowFish1)
                .add(25, 25, 25))
        );

        jPanel6Layout.linkSize(new java.awt.Component[] {jtxtDecTimeBlowfish2, jtxtEncTimeBlowfish2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel6Layout.linkSize(new java.awt.Component[] {jbtBlowfish1, jbtnDecryptBlowfish2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MD5", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtpMD5Hash.setEditable(false);
        jtpMD5Hash.setColumns(20);
        jtpMD5Hash.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5Hash.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5Hash.setLineWrap(true);
        jtpMD5Hash.setRows(5);
        jScrollPane13.setViewportView(jtpMD5Hash);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Hash Time (Sec)");

        jBtClearSHA513.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jBtClearSHA513.setText("Clear MD5");
        jBtClearSHA513.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearSHA513ActionPerformed(evt);
            }
        });

        jBSha513.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBSha513.setText("Hash");
        jBSha513.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSha513ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Hash Value");

        jbtnEncryptHash.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnEncryptHash.setText("Encrypt Hash");
        jbtnEncryptHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEncryptHashActionPerformed(evt);
            }
        });

        jbtnDecryptMD52.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnDecryptMD52.setText("Decrypt");
        jbtnDecryptMD52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDecryptMD52ActionPerformed(evt);
            }
        });

        jtpMD5PlainText3.setEditable(false);
        jtpMD5PlainText3.setColumns(20);
        jtpMD5PlainText3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5PlainText3.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5PlainText3.setLineWrap(true);
        jtpMD5PlainText3.setRows(5);
        jScrollPane15.setViewportView(jtpMD5PlainText3);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Encrypt Time (Sec)");

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("Decrypt Time (Sec)");

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel30.setText("Plaintext");

        jtxtHashTimeMD52.setEditable(false);
        jtxtHashTimeMD52.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtHashTimeMD52.setForeground(new java.awt.Color(0, 102, 51));
        jtxtHashTimeMD52.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtHashTimeMD52.setText("jTextField1");

        jtxtEncTimeMD52.setEditable(false);
        jtxtEncTimeMD52.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeMD52.setForeground(new java.awt.Color(0, 102, 51));
        jtxtEncTimeMD52.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeMD52.setText("jTextField1");

        jtxtDecTimeMD52.setEditable(false);
        jtxtDecTimeMD52.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeMD52.setForeground(new java.awt.Color(0, 102, 51));
        jtxtDecTimeMD52.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeMD52.setText("jTextField1");

        jtpMD5CypherText3.setEditable(false);
        jtpMD5CypherText3.setColumns(20);
        jtpMD5CypherText3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpMD5CypherText3.setForeground(new java.awt.Color(0, 102, 51));
        jtpMD5CypherText3.setLineWrap(true);
        jtpMD5CypherText3.setRows(5);
        jScrollPane14.setViewportView(jtpMD5CypherText3);

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setText("Cyphertext");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jBSha513, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(13, 13, 13)
                        .add(jtxtHashTimeMD52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel16)
                            .add(jbtnEncryptHash))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtEncTimeMD52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel17))
                        .add(7, 7, 7)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(jBtClearSHA513, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(34, 34, 34)
                                .add(jLabel28))
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(jbtnDecryptMD52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jtxtDecTimeMD52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18))))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jScrollPane13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .add(jPanel7Layout.createSequentialGroup()
                .add(136, 136, 136)
                .add(jLabel10)
                .add(154, 154, 154)
                .add(jLabel26)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel30)
                .add(162, 162, 162))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel26)
                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel30)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .add(jScrollPane13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jScrollPane14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .add(6, 6, 6)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jtxtDecTimeMD52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnEncryptHash, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jBSha513, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jtxtHashTimeMD52, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxtEncTimeMD52, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .add(jbtnDecryptMD52, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)))
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel28)
                            .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel17)
                                .add(jLabel16))))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jBtClearSHA513))))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SHA-512", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtpSHA512Hash.setEditable(false);
        jtpSHA512Hash.setColumns(20);
        jtpSHA512Hash.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512Hash.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512Hash.setLineWrap(true);
        jtpSHA512Hash.setRows(5);
        jScrollPane16.setViewportView(jtpSHA512Hash);

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel31.setText("Hash Time (Sec)");

        jBtClearSHA514.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jBtClearSHA514.setText("Clear SHA-512");
        jBtClearSHA514.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearSHA514ActionPerformed(evt);
            }
        });

        jBSha512x.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBSha512x.setText("Hash");
        jBSha512x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSha512xActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setText("Hash Value");

        jbtnEncHash2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnEncHash2.setText("Encrypt Hash");
        jbtnEncHash2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEncHash2ActionPerformed(evt);
            }
        });

        jbtnDecSHA5123.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnDecSHA5123.setText("Decrypt");
        jbtnDecSHA5123.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDecSHA5123ActionPerformed(evt);
            }
        });

        jtpSHA512PlainText3.setEditable(false);
        jtpSHA512PlainText3.setColumns(20);
        jtpSHA512PlainText3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512PlainText3.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512PlainText3.setLineWrap(true);
        jtpSHA512PlainText3.setRows(5);
        jScrollPane17.setViewportView(jtpSHA512PlainText3);

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setText("Encrypt Time (Sec)");

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setText("Decrypt Time (Sec)");

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("Plaintext");

        jtxtHashTimeSHA5122.setEditable(false);
        jtxtHashTimeSHA5122.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtHashTimeSHA5122.setForeground(new java.awt.Color(0, 0, 153));
        jtxtHashTimeSHA5122.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtHashTimeSHA5122.setText("jTextField1");

        jtxtEncTimeSHA5122.setEditable(false);
        jtxtEncTimeSHA5122.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeSHA5122.setForeground(new java.awt.Color(0, 0, 153));
        jtxtEncTimeSHA5122.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeSHA5122.setText("jTextField1");

        jtxtDecTimeSHA5122.setEditable(false);
        jtxtDecTimeSHA5122.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeSHA5122.setForeground(new java.awt.Color(0, 0, 153));
        jtxtDecTimeSHA5122.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeSHA5122.setText("jTextField1");

        jtpSHA512CypherText3.setEditable(false);
        jtpSHA512CypherText3.setColumns(20);
        jtpSHA512CypherText3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpSHA512CypherText3.setForeground(new java.awt.Color(0, 0, 153));
        jtpSHA512CypherText3.setLineWrap(true);
        jtpSHA512CypherText3.setRows(5);
        jScrollPane18.setViewportView(jtpSHA512CypherText3);

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("Cyphertext");

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jBSha512x, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(28, 28, 28)
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel31)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtHashTimeSHA5122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(8, 8, 8)
                        .add(jbtnEncHash2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel33)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtEncTimeSHA5122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel8Layout.createSequentialGroup()
                                .add(jbtnDecSHA5123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jtxtDecTimeSHA5122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel8Layout.createSequentialGroup()
                                .add(jBtClearSHA514)
                                .add(26, 26, 26)
                                .add(jLabel34)))
                        .add(80, 80, 80))
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jScrollPane16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .add(jPanel8Layout.createSequentialGroup()
                .add(136, 136, 136)
                .add(jLabel32)
                .add(154, 154, 154)
                .add(jLabel36)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel35)
                .add(162, 162, 162))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel36)
                    .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel35)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .add(jScrollPane16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jScrollPane18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .add(5, 5, 5)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jbtnEncHash2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jBSha512x, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jtxtHashTimeSHA5122, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxtEncTimeSHA5122, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .add(jbtnDecSHA5123, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .add(jtxtDecTimeSHA5122, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)))
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel31)
                            .add(jLabel34)
                            .add(jLabel33)))
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jBtClearSHA514))))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BlowFish", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jbtBlowfish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtBlowfish.setText("Encrypt");
        jbtBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBlowfishActionPerformed(evt);
            }
        });

        jtpBlowfishCypherText.setEditable(false);
        jtpBlowfishCypherText.setColumns(20);
        jtpBlowfishCypherText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishCypherText.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishCypherText.setLineWrap(true);
        jtpBlowfishCypherText.setRows(5);
        jtpBlowfishCypherText.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jtpBlowfishCypherText);

        jBtClearBlowFish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtClearBlowFish.setText("Clear Blowfish");
        jBtClearBlowFish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearBlowFishActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Cyphertext");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Encryption Time (Sec)");

        jbtDecryptBlowfish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtDecryptBlowfish.setText("Decrypt");
        jbtDecryptBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDecryptBlowfishActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Decryption Time (Sec)");

        jtpBlowfishPlainText.setColumns(20);
        jtpBlowfishPlainText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishPlainText.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishPlainText.setLineWrap(true);
        jtpBlowfishPlainText.setRows(5);
        jtpBlowfishPlainText.setWrapStyleWord(true);
        jScrollPane6.setViewportView(jtpBlowfishPlainText);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Plaintext");

        jtxtEncTimeBlowfish.setEditable(false);
        jtxtEncTimeBlowfish.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtEncTimeBlowfish.setForeground(new java.awt.Color(153, 0, 0));
        jtxtEncTimeBlowfish.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtEncTimeBlowfish.setText("jTextField1");
        jtxtEncTimeBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtEncTimeBlowfishActionPerformed(evt);
            }
        });

        jtxtDecTimeBlowfish.setEditable(false);
        jtxtDecTimeBlowfish.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jtxtDecTimeBlowfish.setForeground(new java.awt.Color(153, 0, 0));
        jtxtDecTimeBlowfish.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtxtDecTimeBlowfish.setText("jTextField1");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jBtClearBlowFish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jbtDecryptBlowfish, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jbtBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel7)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtEncTimeBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel13)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtxtDecTimeBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(163, 163, 163)
                                .add(jLabel21))
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(160, 160, 160)
                                .add(jLabel5)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtxtEncTimeBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6)
                .add(jLabel13)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtDecryptBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtxtDecTimeBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel21)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jBtClearBlowFish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {jbtBlowfish, jbtDecryptBlowfish}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel1Layout.linkSize(new java.awt.Component[] {jtxtDecTimeBlowfish, jtxtEncTimeBlowfish}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 316, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 327, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(417, 417, 417)
                        .add(jLabel29))
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(298, 298, 298))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 845, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .add(2, 2, 2)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jLabel29))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2)
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtClearPlainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearPlainTextActionPerformed
        // TODO add your handling code here:
        jtpPlainText.setText("");       
        jtxtCypherLength.setText("0");     
        
    }//GEN-LAST:event_jbtClearPlainTextActionPerformed

    private void jbtBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBlowfishActionPerformed
       
       myKey =  encKey.getText();
        
       if(myKey == null || myKey.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            long startTime = System.nanoTime();
//            final String key = "knowledgefactory";
            String plain_text = jtpPlainText.getText();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(plain_text, myKey);            
            jtpBlowfishCypherText.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeBlowfish.setText(dc.format(gg));


        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }

    }//GEN-LAST:event_jbtBlowfishActionPerformed

    private void jBMD5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMD5ActionPerformed
        // TODO add your handling code here:
        long startTime = System.nanoTime();

        String plain_text = jtpPlainText.getText();
        String cypher_text = "";
        jtxtHashTimeMD5.setText("");
//        String hashtext;
        try {
  
            // Static getInstance method is called with hashing MD5
            MessageDigest md = MessageDigest.getInstance("MD5");
  
            // digest() method is called to calculate message digest
            //  of an input digest() return array of byte
            byte[] messageDigest = md.digest(plain_text.getBytes());
  
            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);
  
            // Convert message digest into hex value
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            
             jtpMD5CypherText.setText(hashtext);
         long stopTime = System.nanoTime();
        float tt = (stopTime - startTime);
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtHashTimeMD5.setText(dc.format(gg));
        
        } 
  
        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
                
    }//GEN-LAST:event_jBMD5ActionPerformed

    private void jBSha512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSha512ActionPerformed
        // TODO add your handling code here:
         long startTime = System.nanoTime();
        String plain_text = jtpPlainText.getText();
        String cypher_text = "";
         jtpSHA512CypherText.setText("");
       try {
            // getInstance() method is called with algorithm SHA-512
            MessageDigest md = MessageDigest.getInstance("SHA-512");
  
            // digest() method is called
            // to calculate message digest of the input string
            // returned as array of byte
            byte[] messageDigest = md.digest(plain_text.getBytes());
  
            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);
  
            // Convert message digest into hex value
            String hashtext = no.toString(16);
  
            // Add preceding 0s to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
  
            
            jtpSHA512CypherText.setText(hashtext);
            long stopTime = System.nanoTime();
        float tt = stopTime - startTime;        
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtHashTimeSHA512.setText(dc.format(gg));
        
        }
  
        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }        
          
    }//GEN-LAST:event_jBSha512ActionPerformed

    private void jBtClearSHA512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearSHA512ActionPerformed
        jtpSHA512CypherText.setText("");
        jtxtHashTimeSHA512.setText("0");
        jtxtEncTimeSHA512.setText("0");
        jtxtDecTimeSHA512.setText("0");
        jtpSHA512CypherText2.setText(""); 
        jtpSHA512PlainText.setText(""); 
        
    }//GEN-LAST:event_jBtClearSHA512ActionPerformed

    private void jBtClearBlowFishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearBlowFishActionPerformed
        jtpBlowfishCypherText.setText("");
        jtxtEncTimeBlowfish.setText("0");
        jtxtDecTimeBlowfish.setText("0");
        jtpBlowfishPlainText.setText("");        
    }//GEN-LAST:event_jBtClearBlowFishActionPerformed

    private void jBtClearMD5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearMD5ActionPerformed
        jtpMD5CypherText.setText("");
        jtxtHashTimeMD5.setText("0");
        jtxtEncTimeMD5.setText("0");
        jtxtDecTimeMD5.setText("0");
        jtpMD5PlainText.setText(""); 
        jtpMD5CypherText2.setText(""); 
        
    }//GEN-LAST:event_jBtClearMD5ActionPerformed

    private void jbtEncryptSHA512HashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtEncryptSHA512HashActionPerformed
        // TODO add your handling code here:              
        myKey =  encKey.getText();
        long startTime = System.nanoTime();
        
       if(myKey == null || myKey.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            String plain_text = jtpSHA512CypherText.getText();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(plain_text, myKey);            
            jtpSHA512CypherText2.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeSHA512.setText(dc.format(gg));

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
    }//GEN-LAST:event_jbtEncryptSHA512HashActionPerformed

    private void jbtBlowfish1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBlowfish1ActionPerformed
       myKey =  encKey.getText();    
       if(myKey == null || myKey.isEmpty() || fileText == null || fileText.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key or File cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            long startTime = System.nanoTime();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(fileText, myKey);            
            jtpBlowfishCypherText1.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeBlowfish2.setText(dc.format(gg));
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
        
    }//GEN-LAST:event_jbtBlowfish1ActionPerformed

    private void jBtClearBlowFish1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearBlowFish1ActionPerformed
        jtpBlowfishCypherText1.setText("");
        jtpBlowfishPlainText1.setText("");
        jtxtEncTimeBlowfish2.setText("0");
        jtxtDecTimeBlowfish2.setText("0");        
        
    }//GEN-LAST:event_jBtClearBlowFish1ActionPerformed

    private void jBtClearSHA513ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearSHA513ActionPerformed
        jtpMD5Hash.setText("");
        jtpMD5CypherText3.setText("");
        jtpMD5PlainText3.setText("");
        jtxtHashTimeMD52.setText("0");
        jtxtEncTimeMD52.setText("0");
        jtxtDecTimeMD52.setText("0");        
        
    }//GEN-LAST:event_jBtClearSHA513ActionPerformed

    private void jBSha513ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSha513ActionPerformed
             // TODO add your handling code here:
        long startTime = System.nanoTime();
//        String cypher_text = "";
        jtxtHashTimeMD52.setText("");
        
        if(fileText == null || fileText.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("File cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
      try {
              // Static getInstance method is called with hashing MD5
            MessageDigest md = MessageDigest.getInstance("MD5");
  
            // digest() method is called to calculate message digest
            //  of an input digest() return array of byte
            byte[] messageDigest = md.digest(fileText.getBytes());
  
            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);
  
            // Convert message digest into hex value
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            
         jtpMD5Hash.setText(hashtext);
         long stopTime = System.nanoTime();
        float tt = stopTime - startTime;
        
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtHashTimeMD52.setText(dc.format(gg));       
        } 
  
        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        
        }

    }//GEN-LAST:event_jBSha513ActionPerformed

    private void jBtClearSHA514ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearSHA514ActionPerformed
       jtpSHA512Hash.setText("");
       jtpSHA512CypherText3.setText("");
       jtpSHA512PlainText3.setText("");
       jtxtHashTimeSHA5122.setText("0");
       jtxtEncTimeSHA5122.setText("0");
       jtxtDecTimeSHA5122.setText("0");
        
    }//GEN-LAST:event_jBtClearSHA514ActionPerformed

    private void jBSha512xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSha512xActionPerformed
        long startTime = System.nanoTime();
        String plain_text = fileText;
        String cypher_text = "";
         jtpSHA512Hash.setText("");
       try {
            // getInstance() method is called with algorithm SHA-512
            MessageDigest md = MessageDigest.getInstance("SHA-512");
  
            // digest() method is called
            // to calculate message digest of the input string
            // returned as array of byte
            byte[] messageDigest = md.digest(plain_text.getBytes());
  
            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);
  
            // Convert message digest into hex value
            String hashtext = no.toString(16);
  
            // Add preceding 0s to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
  
            
            jtpSHA512Hash.setText(hashtext);
            long stopTime = System.nanoTime();
        float tt = stopTime - startTime;
        
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtHashTimeSHA5122.setText(dc.format(gg)); 
        }
  
        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }        
  
    }//GEN-LAST:event_jBSha512xActionPerformed

    private void jtpPlainTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtpPlainTextFocusLost
        // TODO add your handling code here:
        int str_len  = jtpPlainText.getText().length();
        jtxtCypherLength.setText(str_len+"");
    }//GEN-LAST:event_jtpPlainTextFocusLost

    private void jbtDecryptBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDecryptBlowfishActionPerformed
       long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpBlowfishCypherText.getText();
     try {
           
//            final String key = "knowledgefactory";
            
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpBlowfishPlainText.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeBlowfish.setText(dc.format(gg));

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }     
   
    }//GEN-LAST:event_jbtDecryptBlowfishActionPerformed

    private void jbtEncryptMD5HashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtEncryptMD5HashActionPerformed
      
        myKey =  encKey.getText();
        long startTime = System.nanoTime();
        
       if(myKey == null || myKey.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            String plain_text = jtpMD5CypherText.getText();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(plain_text, myKey);            
            jtpMD5CypherText2.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeMD5.setText(dc.format(gg)); 

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
        
        
    }//GEN-LAST:event_jbtEncryptMD5HashActionPerformed

    private void jbtDecryptMD5HashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDecryptMD5HashActionPerformed
        // TODO add your handling code here:
       long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpMD5CypherText2.getText();
     try {
           
//            final String key = "knowledgefactory";
            
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpMD5PlainText.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeMD5.setText(dc.format(gg)); 
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }   
       
    }//GEN-LAST:event_jbtDecryptMD5HashActionPerformed

    private void jbtDecryptSHA512HashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDecryptSHA512HashActionPerformed
        // TODO add your handling code here:
               long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpSHA512CypherText2.getText();
     try {
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpSHA512PlainText.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeSHA512.setText(dc.format(gg)); 
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_jbtDecryptSHA512HashActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void btnFilePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilePickerActionPerformed
        
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            File file = fileChooser.getSelectedFile();
            try {
                filePath.setText(file.getAbsolutePath());
                FileReader file2 = new FileReader(file.getAbsolutePath());
                    BufferedReader reader = new BufferedReader(file2);
                    String line = reader.readLine();

                    while (line != null) {
                        fileText += line;
                        line = reader.readLine();
                    }
//                    System.out.println(fileText); // so key works
            } catch (IOException ex) {
              filePath.setText("File error! Select another file.");
            }
        } else {
            filePath.setText("File cancelled by user.");
        }
        fileTextLength.setText(fileText.length()+"");
    }//GEN-LAST:event_btnFilePickerActionPerformed

    private void jbtnDecryptBlowfish2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDecryptBlowfish2ActionPerformed
      long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpBlowfishCypherText1.getText();
     try {
           
//            final String key = "knowledgefactory";
            
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpBlowfishPlainText1.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeBlowfish2.setText(dc.format(gg)); 

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }     
   
    }//GEN-LAST:event_jbtnDecryptBlowfish2ActionPerformed

    private void jbtnEncryptHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEncryptHashActionPerformed
     
        myKey =  encKey.getText();
        long startTime = System.nanoTime();
        
       if(myKey == null || myKey.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            String plain_text = jtpMD5Hash.getText();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(plain_text, myKey);            
            jtpMD5CypherText3.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
           
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeMD52.setText(dc.format(gg)); 

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
 
        
        
        
    }//GEN-LAST:event_jbtnEncryptHashActionPerformed

    private void jbtnDecryptMD52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDecryptMD52ActionPerformed
       long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpMD5CypherText3.getText();
     try {
            
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpMD5PlainText3.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
                       
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeMD52.setText(dc.format(gg)); 

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }     
   
    }//GEN-LAST:event_jbtnDecryptMD52ActionPerformed

    private void jbtnEncHash2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEncHash2ActionPerformed
             // TODO add your handling code here:              
        myKey =  encKey.getText();
        long startTime = System.nanoTime();
        
       if(myKey == null || myKey.isEmpty()){
//           JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
           JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
           JDialog dialog = optionPane.createDialog("Error!");
           dialog.setAlwaysOnTop(true); // to show top of all other application
           dialog.setVisible(true); // to visible the dialog
           encKey.grabFocus();
       }else{
         try {
            String plain_text = jtpSHA512Hash.getText();
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();    
            String enc_output = obj_blowfish.encrypt(plain_text, myKey);            
            jtpSHA512CypherText3.setText(enc_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
            
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtEncTimeSHA5122.setText(dc.format(gg)); 

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
    }//GEN-LAST:event_jbtnEncHash2ActionPerformed

    private void jbtnDecSHA5123ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDecSHA5123ActionPerformed
               // TODO add your handling code here:
       long startTime = System.nanoTime();
       myKey =  encKey.getText();
       String enc_output = jtpSHA512CypherText3.getText();
     try {
            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();                    
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);                      
            jtpSHA512PlainText3.setText(dec_output);
            long stopTime = System.nanoTime();
            float tt = stopTime - startTime;
                      
            DecimalFormat dc = new DecimalFormat("0.00000");
            BigDecimal gg = BigDecimal.valueOf(tt/1000000000);
            jtxtDecTimeSHA5122.setText(dc.format(gg));
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(HashingDemo.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jbtnDecSHA5123ActionPerformed

    private void jtxtEncTimeBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtEncTimeBlowfishActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtEncTimeBlowfishActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HashingDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HashingDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HashingDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HashingDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HashingDemo().setVisible(true);
            }
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilePicker;
    private javax.swing.JTextField encKey;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel filePath;
    private javax.swing.JTextField fileTextLength;
    private javax.swing.JButton jBMD5;
    private javax.swing.JButton jBSha512;
    private javax.swing.JButton jBSha512x;
    private javax.swing.JButton jBSha513;
    private javax.swing.JButton jBtClearBlowFish;
    private javax.swing.JButton jBtClearBlowFish1;
    private javax.swing.JButton jBtClearMD5;
    private javax.swing.JButton jBtClearSHA512;
    private javax.swing.JButton jBtClearSHA513;
    private javax.swing.JButton jBtClearSHA514;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton jbtBlowfish;
    private javax.swing.JButton jbtBlowfish1;
    private javax.swing.JButton jbtClearPlainText;
    private javax.swing.JButton jbtDecryptBlowfish;
    private javax.swing.JButton jbtDecryptMD5Hash;
    private javax.swing.JButton jbtDecryptSHA512Hash;
    private javax.swing.JButton jbtEncryptMD5Hash;
    private javax.swing.JButton jbtEncryptSHA512Hash;
    private javax.swing.JButton jbtnDecSHA5123;
    private javax.swing.JButton jbtnDecryptBlowfish2;
    private javax.swing.JButton jbtnDecryptMD52;
    private javax.swing.JButton jbtnEncHash2;
    private javax.swing.JButton jbtnEncryptHash;
    private javax.swing.JTextArea jtpBlowfishCypherText;
    private javax.swing.JTextArea jtpBlowfishCypherText1;
    private javax.swing.JTextArea jtpBlowfishPlainText;
    private javax.swing.JTextArea jtpBlowfishPlainText1;
    private javax.swing.JTextArea jtpMD5CypherText;
    private javax.swing.JTextArea jtpMD5CypherText2;
    private javax.swing.JTextArea jtpMD5CypherText3;
    private javax.swing.JTextArea jtpMD5Hash;
    private javax.swing.JTextArea jtpMD5PlainText;
    private javax.swing.JTextArea jtpMD5PlainText3;
    private javax.swing.JTextPane jtpPlainText;
    private javax.swing.JTextArea jtpSHA512CypherText;
    private javax.swing.JTextArea jtpSHA512CypherText2;
    private javax.swing.JTextArea jtpSHA512CypherText3;
    private javax.swing.JTextArea jtpSHA512Hash;
    private javax.swing.JTextArea jtpSHA512PlainText;
    private javax.swing.JTextArea jtpSHA512PlainText3;
    private javax.swing.JTextField jtxtCypherLength;
    private javax.swing.JTextField jtxtDecTimeBlowfish;
    private javax.swing.JTextField jtxtDecTimeBlowfish2;
    private javax.swing.JTextField jtxtDecTimeMD5;
    private javax.swing.JTextField jtxtDecTimeMD52;
    private javax.swing.JTextField jtxtDecTimeSHA512;
    private javax.swing.JTextField jtxtDecTimeSHA5122;
    private javax.swing.JTextField jtxtEncTimeBlowfish;
    private javax.swing.JTextField jtxtEncTimeBlowfish2;
    private javax.swing.JTextField jtxtEncTimeMD5;
    private javax.swing.JTextField jtxtEncTimeMD52;
    private javax.swing.JTextField jtxtEncTimeSHA512;
    private javax.swing.JTextField jtxtEncTimeSHA5122;
    private javax.swing.JTextField jtxtHashTimeMD5;
    private javax.swing.JTextField jtxtHashTimeMD52;
    private javax.swing.JTextField jtxtHashTimeSHA512;
    private javax.swing.JTextField jtxtHashTimeSHA5122;
    // End of variables declaration//GEN-END:variables
    
}
